#load "graphics.cma";;
open Graphics;;
open Sys;;

(* 0: mur, 1: sol, 2: pacgum, 3: pacgum bonus *)
let creerCarteInitiale () = [|[|0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0|];
										[|0;2;2;2;2;2;2;2;2;2;2;2;2;0;0;2;2;2;2;2;2;2;2;2;2;2;2;0|];
										[|0;2;0;0;0;0;2;0;0;0;0;0;2;0;0;2;0;0;0;0;0;2;0;0;0;0;2;0|];
										[|0;3;0;0;0;0;2;0;0;0;0;0;2;0;0;2;0;0;0;0;0;2;0;0;0;0;3;0|];
										[|0;2;0;0;0;0;2;0;0;0;0;0;2;0;0;2;0;0;0;0;0;2;0;0;0;0;2;0|];
										[|0;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;0|];
										[|0;2;0;0;0;0;2;0;0;2;0;0;0;0;0;0;0;0;2;0;0;2;0;0;0;0;2;0|];
										[|0;2;0;0;0;0;2;0;0;2;0;0;0;0;0;0;0;0;2;0;0;2;0;0;0;0;2;0|];
										[|0;2;2;2;2;2;2;0;0;2;2;2;2;0;0;2;2;2;2;0;0;2;2;2;2;2;2;0|];
										[|0;0;0;0;0;0;2;0;0;0;0;0;2;0;0;2;0;0;0;0;0;2;0;0;0;0;0;0|];
										[|0;0;0;0;0;0;2;0;0;0;0;0;2;0;0;2;0;0;0;0;0;2;0;0;0;0;0;0|];
										[|0;0;0;0;0;0;2;0;0;2;2;2;2;2;2;2;2;2;2;0;0;2;0;0;0;0;0;0|];
										[|0;0;0;0;0;0;2;0;0;2;0;0;0;0;0;0;0;0;2;0;0;2;0;0;0;0;0;0|];
										[|0;0;0;0;0;0;2;0;0;2;0;0;0;0;0;0;0;0;2;0;0;2;0;0;0;0;0;0|];
										[|1;1;1;1;1;1;2;2;2;2;0;0;0;0;0;0;0;0;2;2;2;2;1;1;1;1;1;1|];
										[|0;0;0;0;0;0;2;0;0;2;0;0;0;0;0;0;0;0;2;0;0;2;0;0;0;0;0;0|];
										[|0;0;0;0;0;0;2;0;0;2;0;0;0;0;0;0;0;0;2;0;0;2;0;0;0;0;0;0|];
										[|0;0;0;0;0;0;2;0;0;2;2;2;2;2;2;2;2;2;2;0;0;2;0;0;0;0;0;0|];
										[|0;0;0;0;0;0;2;0;0;2;0;0;0;0;0;0;0;0;2;0;0;2;0;0;0;0;0;0|];
										[|0;0;0;0;0;0;2;0;0;2;0;0;0;0;0;0;0;0;2;0;0;2;0;0;0;0;0;0|];
										[|0;2;2;2;2;2;2;2;2;2;2;2;2;0;0;2;2;2;2;2;2;2;2;2;2;2;2;0|];
										[|0;2;0;0;0;0;2;0;0;0;0;0;2;0;0;2;0;0;0;0;0;2;0;0;0;0;2;0|];
										[|0;3;0;0;0;0;2;0;0;0;0;0;2;0;0;2;0;0;0;0;0;2;0;0;0;0;3;0|];
										[|0;2;2;2;0;0;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;0;0;2;2;2;0|];
										[|0;0;0;2;0;0;2;0;0;2;0;0;0;0;0;0;0;0;2;0;0;2;0;0;2;0;0;0|];
										[|0;0;0;2;0;0;2;0;0;2;0;0;0;0;0;0;0;0;2;0;0;2;0;0;2;0;0;0|];
										[|0;2;2;2;2;2;2;0;0;2;2;2;2;0;0;2;2;2;2;0;0;2;2;2;2;2;2;0|];
										[|0;2;0;0;0;0;0;0;0;0;0;0;2;0;0;2;0;0;0;0;0;0;0;0;0;0;2;0|];
										[|0;2;0;0;0;0;0;0;0;0;0;0;2;0;0;2;0;0;0;0;0;0;0;0;0;0;2;0|];
										[|0;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;2;0|];
										[|0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0|]|];;

let afficherCarteTotale carte = 
	for i=0 to 30 do
		let t = carte.(i) in
		for j=0 to 27 do
			if t.(j) = 0 then begin set_color (black); fill_rect (20*j) (100+20*(30-i)) 20 20; end
				else begin set_color (white); fill_rect (20*j) (100+20*(30-i)) 20 20; end;
			if t.(j) = 2 then begin set_color (red); fill_rect (20*j+8) (108+20*(30-i)) 6 6; end;
			if t.(j) = 3 then begin set_color (red); fill_rect (20*j+3) (106+20*(30-i)) 14 14; end;
		done;
	done;; (* Faire disjonction pour afficher les blanches sur plus d'espace *)

let afficherCarte carte = 
	for i=0 to 30 do
		let t = carte.(i) in
		for j=0 to 27 do
			if t.(j) <> 0 then begin set_color (white); fill_rect (20*j) (100+20*(30-i)) 20 20; end;
			if t.(j) = 2 then begin set_color (red); fill_rect (20*j+8) (108+20*(30-i)) 6 6; end;
			if t.(j) = 3 then begin set_color (red); fill_rect (20*j+3) (106+20*(30-i)) 14 14; end;
		done;
	done;; (* Faire disjonction pour afficher les blanches sur plus d'espace *)

let collisionCarres x1 y1 c1 x2 y2 c2 = 
	( (x2+c2/2-x1-c1/2)*(x2+c2/2-x1-c1/2) < (c1+c2)*(c1+c2)/4 ) && ( (y2+c2/2-y1-c1/2)*(y2+c2/2-y1-c1/2) < (c1+c2)*(c1+c2)/4 );;

let casesAutour x y carte = let px = x + 8 and py = 620 - (y - 100 + 8) in
	[|[|carte.(py/20+1).(px/20-1);carte.(py/20+1).(px/20);carte.(py/20+1).(px/20+1)|];
		[|carte.(py/20).(px/20-1);carte.(py/20).(px/20);carte.(py/20).(px/20+1)|];
		[|carte.(py/20-1).(px/20-1);carte.(py/20-1).(px/20);carte.(py/20-1).(px/20+1)|]|];;

let gererCollisions posx posy carte n = 
	let px = !posx + 8 and py = 620 - (!posy - 100 + 8) in
	if carte.(py/20).(px/20) = 2 || carte.(py/20).(px/20) = 3 then 
		begin
			carte.(py/20).(px/20) <- 1;
			n := !n-1;
		end;;

let nombrePacgums carte = let n = ref 0 in
	for i=0 to 30 do
		for j=0 to 27 do
			if carte.(i).(j) = 2 || carte.(i).(j) = 3 then n:= !n+1;
		done;
	done;
	!n;;

let case x y = ((620 - (y - 100))/20),(x/20);;

let faireAvancerJoueur posx posy jx jy mousex mousey vitesse carte = 
	let x = mousex - jx and y = mousey - jy in
	let norme = sqrt ((float_of_int x)**2. +. (float_of_int y)**2.) in
	let vectx = int_of_float ((float_of_int (x*vitesse))/.norme) and
		vecty = int_of_float ((float_of_int (y*vitesse))/.norme) in
	
	set_color (rgb 100 100 100);
	fill_rect 0 0 (2*jx) (2*jy);
	
	posx := !posx + vectx;
	posy := !posy + vecty;
	
	let aposx = !posx - vectx in let aposy = !posy - vecty in let i,j = case aposx aposy in
	
		(* Vérifier qu'on va pas sur des cases noires autour *)
	if carte.(i+1 mod 31).(j) = 0 && vecty<0 then (* case du bas *)
		begin
			(*set_color (blue);
			fill_rect (20*(!posx/20)) (20*(aposy/20-1)) 20 20;*)
			if !posy - (20*(aposy/20-1)) < 20 then posy := 20*(aposy/20)+1;
		end;
	if carte.(i-1).(j) = 0 && vecty>0 then (* case du haut *)
		begin
			if (20*(aposy/20+1)) - !posy < 16 then posy := 20*(aposy/20+1)-16;
		end;
	if carte.(i).(j-1 mod 28) = 0 && vectx < 0 then (* case de gauche *)
		begin
			if !posx - (20*(aposx/20-1)) < 20 then posx := 20*(aposx/20);
		end;
	if carte.(i).(j+1 mod 28) = 0 && vectx > 0 then (* case de droite *)
		begin
			(*set_color (magenta);
			fill_rect (20*(!posx/20+1)) (20*(aposy/20)) 20 20;*)
			if (20*(aposx/20+1)) - !posx  < 16 then posx := 20*(aposx/20+1)-16;
		end;
	
		(* Faire traverser l'écran si on en sort *)
	if !posx < 0 then posx := !posx + 544;
	if !posx > 544 then posx := !posx - 544;
	if !posy < 100 then posy := !posy + 604;
	if !posy > 704 then posy := !posy - 620;	
	
		(* Affichage du joystick *)
	set_color (rgb 250 80 40);
	fill_circle (jx + 3*vectx) (jy + 3*vecty) 15;;


let faireAvancerJoueur2 posx posy dirx diry= let toucheappuyee = ref false and key = ref ' ' in
if key_pressed () then 
	if !toucheappuyee = false then 
		begin
		key := read_key () 
		end;
	toucheappuyee := true;
if !key = 'z' then begin diry := 1; dirx:= 0 end;
if !key = 's' then begin diry := -1; dirx := 0 end;
if !key = 'q' then begin dirx:= -1; diry := 0 end; 
if !key = 'd' then begin dirx := 1; diry:= 0 end;

posx := !posx + !dirx;
posy := !posy + !diry;

if !posx < 0 then posx := !posx + 544;
if !posx > 544 then posx := !posx - 544;
if !posy < 100 then posy := !posy + 604;
if !posy > 704 then posy := !posy - 620;
;;









open_graph "600x600";;
;;
let jeu =
	open_graph " 560x720";
	set_window_title "Pacman";
	
		(* Déclaration des variables *)
	let framerate = 0.017 and
	tempsProgramme = ref (time()) and
	tailleMenu = 100 and
	posx = ref (size_x()/2) and
	posy = ref 244 and
	vitesse = 3 and
	dirx = ref 1 and 
	diry= ref 0 and
	carte = creerCarteInitiale () and
	nbPacgums = ref (nombrePacgums (creerCarteInitiale ())) in
	
		(* Affichages initiaux et permanents *)
	set_color (rgb 100 100 100);
	fill_rect 0 0 (size_x()) tailleMenu;
	afficherCarteTotale carte;
	
		(* Boucle globale du programme *)
	while !nbPacgums > 0 do
	
			(* Boucle d'attente pour garder un framerate constant *)
		while time() -. !tempsProgramme < framerate do
			posy := !posy;
		done;
		tempsProgramme := (time());
		
			(* Instructions executées à chaque frame *)
		afficherCarte carte;
		
		let (mx,my) = mouse_pos() in
		faireAvancerJoueur2 posx posy dirx diry;
		gererCollisions posx posy carte nbPacgums;
		
			(* Affichage du joueur et du nombre de pacgums *)
		set_color(rgb 200 200 0);
		fill_rect !posx !posy 16 16;
		set_color (rgb 100 100 100);
		fill_rect 280 40 240 60;
		set_color (black);
		moveto 280 40;
		draw_string (string_of_int !nbPacgums);
		let i,j = case !posx !posy in
		moveto 280 60;
		draw_string (string_of_int i);
		moveto 280 80;
		draw_string (string_of_int j);
	done;;